name: "Spring Boot + Docker Image + Curl (ALL-ECHO Safe)"

on:
  workflow_dispatch:
    inputs:
      java_version:
        description: "JDK 버전"
        type: choice
        required: true
        default: "21"
        options: ["17", "21"]
      maven_version:
        description: "Maven 버전 (예: 3.9.9)"
        required: true
        default: "3.9.9"
      image_name:
        description: "이미지 이름(태그 자동 생성)"
        required: true
        default: "app-image"
      create_release:
        description: "GitHub Release 생성 여부"
        type: boolean
        required: true
        default: true
      skip_tests:
        description: "Maven 테스트 생략"
        type: boolean
        required: true
        default: true

permissions:
  contents: write
  actions: read
  checks: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs

jobs:
  build-package-image:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    steps:
      # ---------- Bootstrap (helpers 작성) ----------
      - name: "Bootstrap"
        run: |
          set -Eeuo pipefail
          mkdir -p "$LOG_DIR"
          cat > /tmp/echo_helpers.sh <<'SH'
#!/usr/bin/env bash
set -Eeuo pipefail

BOLD=$'\033[1m'; RESET=$'\033[0m'; STEP="▶"
OK="✅"; WARN="⚠️"; FAIL="❌"; DONE="✔"

ts(){ date +"%Y-%m-%d %H:%M:%S%z"; }
_log(){ local f="${LOG_FILE:-/dev/null}"; printf "%s\n" "$*" | tee -a "$f" >&2; }
sect(){ _log ""; _log "${STEP} [$(ts)] $*"; }
echoe(){ _log "${OK} $*"; }
warne(){ _log "${WARN} $*"; }
faile(){ _log "${FAIL} $*"; }
finish(){ _log "${DONE} $*"; }

# ★ 단일 진입점: 모든 실행은 run_cmd로만
run_cmd(){
  local cmd="$*"
  # 1) 왼쪽에 echo 형태로 먼저 출력 (셸 안전 이스케이프)
  printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"
  # 2) 실제 실행 (eval 금지, bash -lc 사용)
  bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"
}
catch(){ local rc=$?; faile "STEP FAILED (rc=${rc})"; exit $rc; }
SH
          chmod +x /tmp/echo_helpers.sh
          echo "helpers ready" | tee -a "$LOG_DIR/_init.log"

      # ---------- Checkout ----------
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Env summary ----------
      - name: "Env summary"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/01_env.log"
          source /tmp/echo_helpers.sh; trap catch ERR
          sect "Runner environment"
          run_cmd "uname -a"
          run_cmd "cat /etc/os-release || true"
          run_cmd "docker --version || true"
          run_cmd "which java || true"
          run_cmd "df -h"
          finish "Env summary done"

      # ---------- Java ----------
      - name: "Setup Java (Temurin)"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      - name: "Verify Java"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/02_java.log"
          source /tmp/echo_helpers.sh; trap catch ERR
          run_cmd "java -version || true"
          finish "Java ready"

      # ---------- Maven ----------
      - name: "Install Maven via curl"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/03_maven.log"
          source /tmp/echo_helpers.sh; trap catch ERR
          sect "Install Maven"
          MV="${{ inputs.maven_version }}"
          URL="https://archive.apache.org/dist/maven/maven-3/${MV}/binaries/apache-maven-${MV}-bin.tar.gz"
          run_cmd "curl -fsSL \"$URL\" -o maven.tgz"
          run_cmd "sudo tar -C /opt -xzf maven.tgz"
          run_cmd "sudo ln -sf \"/opt/apache-maven-${MV}/bin/mvn\" /usr/local/bin/mvn"
          run_cmd "mvn -v"
          finish "Maven install complete"

      # ---------- Ensure Dockerfile ----------
      - name: "Ensure Dockerfile (auto-generate if missing)"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/04_dockerfile.log"
          source /tmp/echo_helpers.sh; trap catch ERR
          sect "Ensure Dockerfile"
          if [ ! -f Dockerfile ]; then
            warne "Dockerfile not found → generating"
            # ⚠️ heredoc 앞뒤에 echo 끼우지 않음 (구문 충돌 방지)
            cat > Dockerfile <<'DOCKER'
# ---- build stage ----
FROM eclipse-temurin:21-jdk AS build
WORKDIR /workspace
COPY . .
# (Jar is built by workflow)

# ---- run stage ----
FROM gcr.io/distroless/java21-debian12
WORKDIR /app
COPY target/*.jar /app/app.jar
EXPOSE 8080
USER 65532:65532
ENTRYPOINT ["java","-jar","/app/app.jar"]
DOCKER
            echoe "Dockerfile generated"
          else
            echoe "Existing Dockerfile will be used"
          fi
          finish "Dockerfile ready"

      # ---------- Maven package ----------
      - name: "Maven Build (package)"
        id: mvn
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/05_mvn_pkg.log"
          source /tmp/echo_helpers.sh; trap catch ERR
          sect "Maven package"
          if [[ "${{ inputs.skip_tests }}" == "true" ]]; then
            warne "Skipping tests"
            run_cmd "mvn -B -DskipTests package"
          else
            run_cmd "mvn -B package"
          fi
          JAR_PATH="$(ls -1 target/*.jar | grep -Ev 'sources|javadoc' | head -n1 || true)"
          if [ -z "$JAR_PATH" ]; then faile "No runnable JAR in target/"; exit 1; fi
          echo "jar_path=$JAR_PATH" >> "$GITHUB_OUTPUT"
          echoe "Built JAR: $JAR_PATH"
          finish "Maven build complete"

      # ---------- Docker build ----------
      - name: "Build Docker image"
        id: dimg
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/06_docker_build.log"
          source /tmp/echo_helpers.sh; trap catch ERR
          sect "Docker image build"
          IMG="${{ inputs.image_name }}"
          TAG="v${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          FULL="${IMG}:${TAG}"
          echo "full_image=$FULL" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echoe "Image tag → $FULL"
          run_cmd "docker buildx build --load -t \"$FULL\" ."
          run_cmd "docker image ls \"$FULL\""
          finish "Docker build complete"

      # ---------- Export & checksums ----------
      - name: "Export image & generate checksums"
        id: saveimg
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/07_export.log"
          source /tmp/echo_helpers.sh; trap catch ERR
          sect "docker save + checksums"
          OUT="dist"
          run_cmd "mkdir -p \"$OUT\""
          IMG="${{ steps.dimg.outputs.full_image }}"
          TAR="${OUT}/$(echo "$IMG" | tr '/:' '__').tar"
          TGZ="${TAR}.gz"
          run_cmd "docker save \"$IMG\" -o \"$TAR\""
          run_cmd "gzip -9 \"$TAR\""
          run_cmd "(cd \"$OUT\" && sha256sum \"$(basename \"$TGZ\")\" > \"$(basename \"$TGZ\").sha256\")"
          run_cmd "(cd \"$OUT\" && md5sum    \"$(basename \"$TGZ\")\" > \"$(basename \"$TGZ\").md5\")"
          JAR="${{ steps.mvn.outputs.jar_path }}"
          run_cmd "cp \"$JAR\" \"$OUT/\""
          run_cmd "(cd \"$OUT\" && sha256sum \"$(basename \"$JAR\")\" > \"$(basename \"$JAR\").sha256\")"
          run_cmd "(cd \"$OUT\" && md5sum    \"$(basename \"$JAR\")\" > \"$(basename \"$JAR\").md5\")"
          echo "tar_gz=$TGZ" >> "$GITHUB_OUTPUT"
          echo "jar_file=$OUT/$(basename "$JAR")" >> "$GITHUB_OUTPUT"
          echoe "Artifacts ready: $OUT"
          finish "Export & checksum complete"

      # ---------- Upload artifacts ----------
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: springboot-build-and-image
          path: |
            dist/**
            .github/echo_logs/**
          if-no-files-found: error
          retention-days: 14

      # ---------- Release ----------
      - name: "Create Release & upload assets"
        if: ${{ inputs.create_release == true }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_id }}-${{ github.run_attempt }}
          name: "Build ${{ github.run_id }}-${{ github.run_attempt }}"
          body: |
            - JDK: ${{ inputs.java_version }}
            - Maven: ${{ inputs.maven_version }}
            - Image: ${{ steps.dimg.outputs.full_image }}
            - Jar: ${{ steps.mvn.outputs.jar_path }}
            - Echo logs included (.github/echo_logs)
          files: |
            dist/*.jar
            dist/*.jar.sha256
            dist/*.jar.md5
            dist/*.tar.gz
            dist/*.tar.gz.sha256
            dist/*.tar.gz.md5
