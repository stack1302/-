name: "Spring Boot + Docker Image + Curl Downloads (All-in-One + ALL-ECHO)"

on:
  workflow_dispatch:
    inputs:
      java_version:
        description: "JDK Î≤ÑÏ†Ñ"
        type: choice
        required: true
        default: "21"
        options: ["17", "21"]
      maven_version:
        description: "Maven Î≤ÑÏ†Ñ (Ïòà: 3.9.9)"
        required: true
        default: "3.9.9"
      image_name:
        description: "Ïù¥ÎØ∏ÏßÄ Ïù¥Î¶Ñ(ÌÉúÍ∑∏Îäî ÏûêÎèô ÏÉùÏÑ±)"
        required: true
        default: "app-image"
      create_release:
        description: "GitHub Release ÏÉùÏÑ± Ïó¨Î∂Ä"
        type: boolean
        required: true
        default: true
      skip_tests:
        description: "Maven ÌÖåÏä§Ìä∏ ÏÉùÎûµ"
        type: boolean
        required: true
        default: true

permissions:
  contents: write
  actions: read
  checks: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs

jobs:
  build-package-image:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      # ---------- Echo helpers (global) ----------
      - name: "üß© Init Echo helpers (global)"
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$LOG_DIR"
          cat > /tmp/echo_helpers.sh << 'SH'
#!/usr/bin/env bash
set -o pipefail

BOLD=$'\033[1m'
DIM=$'\033[2m'
RESET=$'\033[0m'
GREEN=$'\033[32m'
YELLOW=$'\033[33m'
RED=$'\033[31m'
BLUE=$'\033[34m'
OK="‚úÖ"
WARN="‚ö†Ô∏è"
FAIL="‚ùå"
STEP="‚ñ∂"
DONE="‚úî"
PKG="üì¶"

ts() { date +"%Y-%m-%d %H:%M:%S%z"; }
_log() { local f="${LOG_FILE:-/dev/null}"; printf "%s\n" "$*" | tee -a "$f" >&2; }
sect() { _log ""; _log "${BOLD}${STEP} [$(ts)] $*${RESET}"; }
echoe() { _log "${OK} ${GREEN}$*${RESET}"; }
warne() { _log "${WARN} ${YELLOW}$*${RESET}"; }
faile() { _log "${FAIL} ${RED}$*${RESET}"; }
finish() { _log "${DONE} ${BLUE}$*${RESET}"; }
run_cmd() { local cmd="$*"; _log "${DIM}${PKG} $cmd${RESET}"; eval "$cmd"; }
catch() { local rc=$?; faile "STEP FAILED (rc=${rc})"; exit $rc; }
SH
          chmod +x /tmp/echo_helpers.sh
          echo "Echo helpers ready" | tee -a "$LOG_DIR/_init.log"

      # ---------- Checkout (with echo wrappers) ----------
      - name: "‚òëÔ∏è Checkout ‚Äî start"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/00_checkout.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Checkout (start)"

      - name: "‚òëÔ∏è Checkout"
        uses: actions/checkout@v4

      - name: "‚òëÔ∏è Checkout ‚Äî done"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/00_checkout.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          finish "Checkout completed"

      # ---------- Env summary ----------
      - name: "üß≠ Env & runner summary"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/01_env_summary.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Environment summary"
          run_cmd "uname -a"
          run_cmd "cat /etc/os-release || true"
          run_cmd "docker --version || true"
          run_cmd "which java || true"
          run_cmd "df -h"
          echoe "Repo: ${GITHUB_REPOSITORY} | Run: ${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          finish "Env summary done"

      # ---------- Setup Java (with echo wrappers) ----------
      - name: "‚òï Setup Java ‚Äî start"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/02_setup_java.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Setup Java (Temurin ${{ inputs.java_version }}) ‚Äî start"

      - name: "‚òï Setup Java (Temurin)"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      - name: "‚òï Setup Java ‚Äî done"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/02_setup_java.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          run_cmd "java -version || true"
          finish "Setup Java completed"

      # ---------- Install Maven ----------
      - name: "üß∞ Install Maven via curl"
        id: maven
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/03_maven_install.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Install Maven '${{ inputs.maven_version }}' via curl"
          MV="${{ inputs.maven_version }}"
          URL="https://archive.apache.org/dist/maven/maven-3/${MV}/binaries/apache-maven-${MV}-bin.tar.gz"
          run_cmd "curl -fsSL \"$URL\" -o maven.tgz"
          run_cmd "sudo tar -C /opt -xzf maven.tgz"
          run_cmd "sudo ln -sf \"/opt/apache-maven-${MV}/bin/mvn\" /usr/local/bin/mvn"
          run_cmd "mvn -v"
          echoe "Maven ${MV} installed"
          finish "Maven install complete"

      # ---------- Ensure Dockerfile ----------
      - name: "üßæ Ensure Dockerfile (auto-generate if missing)"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/04_dockerfile_check.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Ensure Dockerfile"
          if [ ! -f Dockerfile ]; then
            warne "Dockerfile not found ‚Üí generating safe multistage Dockerfile"
            cat > Dockerfile << 'DOCKER'
# ---- build stage ----
FROM eclipse-temurin:21-jdk AS build
WORKDIR /workspace
COPY . .
# (Jar is built in workflow; this stage is for future extension)

# ---- run stage ----
FROM gcr.io/distroless/java21-debian12
WORKDIR /app
COPY target/*.jar /app/app.jar
EXPOSE 8080
USER 65532:65532
ENTRYPOINT ["java","-jar","/app/app.jar"]
DOCKER
            echoe "Dockerfile generated"
          else
            echoe "Existing Dockerfile will be used"
          fi
          finish "Dockerfile ready"

      # ---------- Maven package ----------
      - name: "üß± Maven Build (package)"
        id: mvn
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/05_maven_package.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Maven package build"
          if [[ "${{ inputs.skip_tests }}" == "true" ]]; then
            warne "Skipping tests"
            run_cmd "mvn -B -DskipTests package"
          else
            run_cmd "mvn -B package"
          fi
          JAR_PATH="$(ls -1 target/*.jar | grep -Ev 'sources|javadoc' | head -n1 || true)"
          if [ -z "$JAR_PATH" ]; then
            faile "No runnable JAR produced in target/"
            exit 1
          fi
          echo "jar_path=$JAR_PATH" >> "$GITHUB_OUTPUT"
          echoe "Built JAR: $JAR_PATH"
          finish "Maven build complete"

      # ---------- Docker build ----------
      - name: "üê≥ Build Docker image"
        id: dimg
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/06_docker_build.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Docker image build"
          IMG="${{ inputs.image_name }}"
          TAG="v${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          FULL="${IMG}:${TAG}"
          echo "full_image=$FULL" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echoe "Image tag ‚Üí $FULL"
          run_cmd "docker buildx build --load -t \"$FULL\" ."
          run_cmd "docker image ls \"$FULL\""
          finish "Docker build complete"

      # ---------- Export & checksums ----------
      - name: "üì¶ Export image & generate checksums"
        id: saveimg
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/07_export_checksums.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Export image (docker save) + checksums"
          OUT_DIR="dist"
          run_cmd "mkdir -p \"$OUT_DIR\""
          IMG="${{ steps.dimg.outputs.full_image }}"
          TAR="${OUT_DIR}/$(echo "$IMG" | tr '/:' '__').tar"
          TGZ="${TAR}.gz"
          run_cmd "docker save \"$IMG\" -o \"$TAR\""
          run_cmd "gzip -9 \"$TAR\""
          (cd "$OUT_DIR" && sha256sum "$(basename "$TGZ")" > "$(basename "$TGZ").sha256")
          (cd "$OUT_DIR" && md5sum    "$(basename "$TGZ")" > "$(basename "$TGZ").md5")
          JAR="${{ steps.mvn.outputs.jar_path }}"
          run_cmd "cp \"$JAR\" \"$OUT_DIR/\""
          (cd "$OUT_DIR" && sha256sum "$(basename "$JAR")" > "$(basename "$JAR").sha256")
          (cd "$OUT_DIR" && md5sum    "$(basename "$JAR")" > "$(basename "$JAR").md5")
          echo "tar_gz=$TGZ" >> "$GITHUB_OUTPUT"
          echo "jar_file=$OUT_DIR/$(basename "$JAR")" >> "$GITHUB_OUTPUT"
          echoe "Artifacts ready under $OUT_DIR"
          finish "Export & checksum complete"

      # ---------- Upload artifact (with echo wrappers) ----------
      - name: "‚¨ÜÔ∏è Upload artifacts ‚Äî start"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/08_upload_artifacts.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Upload artifacts ‚Äî start"

      - name: "‚¨ÜÔ∏è Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: springboot-build-and-image
          path: |
            dist/**
            .github/echo_logs/**
          if-no-files-found: error
          retention-days: 14

      - name: "‚¨ÜÔ∏è Upload artifacts ‚Äî done"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/08_upload_artifacts.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          finish "Upload artifacts completed"

      # ---------- Release (with echo wrappers) ----------
      - name: "üè∑Ô∏è Create Release ‚Äî start"
        if: ${{ inputs.create_release == true }}
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/09_release.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Create GitHub Release ‚Äî start"

      - name: "üè∑Ô∏è Create Release & upload assets"
        if: ${{ inputs.create_release == true }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_id }}-${{ github.run_attempt }}
          name: "Build ${{ github.run_id }}-${{ github.run_attempt }}"
          body: |
            - üß© EchoOps logs included (.github/echo_logs)
            - JDK: ${{ inputs.java_version }}
            - Maven: ${{ inputs.maven_version }}
            - Image: ${{ steps.dimg.outputs.full_image }}
            - Jar: ${{ steps.mvn.outputs.jar_path }}
          files: |
            dist/*.jar
            dist/*.jar.sha256
            dist/*.jar.md5
            dist/*.tar.gz
            dist/*.tar.gz.sha256
            dist/*.tar.gz.md5

      - name: "üè∑Ô∏è Create Release ‚Äî done"
        if: ${{ inputs.create_release == true }}
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/09_release.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          finish "Release created"

      # ---------- Curl examples ----------
      - name: "üì• Print curl download commands"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/10_curl_examples.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Print curl download commands"
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          TAG="v${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          JAR_FILE="$(basename "${{ steps.saveimg.outputs.jar_file }}")"
          IMG_FILE="$(basename "${{ steps.saveimg.outputs.tar_gz }}")"
          echoe "Commands (copy & run):"
          echo "curl -L -o ${JAR_FILE} https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${JAR_FILE}" | tee -a "$LOG_FILE"
          echo "curl -L -o ${JAR_FILE}.sha256 https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${JAR_FILE}.sha256" | tee -a "$LOG_FILE"
          echo "sha256sum -c ${JAR_FILE}.sha256" | tee -a "$LOG_FILE"
          echo "" | tee -a "$LOG_FILE"
          echo "curl -L -o ${IMG_FILE} https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${IMG_FILE}" | tee -a "$LOG_FILE"
          echo "curl -L -o ${IMG_FILE}.sha256 https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${IMG_FILE}.sha256" | tee -a "$LOG_FILE"
          echo "sha256sum -c ${IMG_FILE}.sha256" | tee -a "$LOG_FILE"
          echo "gunzip -c ${IMG_FILE} | docker load" | tee -a "$LOG_FILE"
          finish "Printed curl commands"

      # ---------- Final summary ----------
      - name: "‚úÖ Final summary"
        shell: bash
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/99_summary.log"
          source /tmp/echo_helpers.sh
          trap catch ERR
          sect "Final summary"
          echoe "JAR : ${{ steps.mvn.outputs.jar_path }}"
          echoe "Image: ${{ steps.dimg.outputs.full_image }}"
          echoe "TGZ : ${{ steps.saveimg.outputs.tar_gz }}"
          if [[ "${{ inputs.create_release }}" == "true" ]]; then
            echoe "Release tag: v${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          else
            warne "Release was skipped (create_release=false)"
          fi
          finish "Workflow done üéâ"
