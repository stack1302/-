name: "Spring Boot + Docker Image + Curl (ALL-ECHO, no helper file)"

on:
  workflow_dispatch:
    inputs:
      java_version:
        description: "JDK 버전"
        type: choice
        required: true
        default: "21"
        options: ["17", "21"]
      maven_version:
        description: "Maven 버전 (예: 3.9.9)"
        required: true
        default: "3.9.9"
      image_name:
        description: "이미지 이름(태그 자동 생성)"
        required: true
        default: "app-image"
      create_release:
        description: "GitHub Release 생성 여부"
        type: boolean
        required: true
        default: true
      skip_tests:
        description: "Maven 테스트 생략"
        type: boolean
        required: true
        default: true
      dockerfile_url:
        description: "Dockerfile RAW URL (없으면 레포 루트의 Dockerfile 사용)"
        required: false
        default: ""

permissions:
  contents: write
  actions: read
  checks: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs

jobs:
  build-package-image:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    steps:
      - name: "☑️ Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🧭 Env & runner summary"
        run: |
          set -Eeuo pipefail
          mkdir -p "$LOG_DIR"
          export LOG_FILE="$LOG_DIR/01_env_summary.log"
          # ── echo+실행 미니 헬퍼(스텝 로컬) ──
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          echo "▶ Environment summary" | tee -a "$LOG_FILE"
          run_cmd "uname -a"
          run_cmd "cat /etc/os-release || true"
          run_cmd "docker --version || true"
          run_cmd "which java || true"
          run_cmd "df -h"

      - name: "☕ Setup Java (Temurin)"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      - name: "☕ Verify Java"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/02_setup_java.log"
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          run_cmd "java -version || true"

      - name: "🧾 Ensure Dockerfile (curl-only when creating)"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/03_dockerfile.log"
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          if [ -n "${{ inputs.dockerfile_url }}" ]; then
            echo "▶ Download Dockerfile via curl" | tee -a "$LOG_FILE"
            run_cmd "curl -fsSL \"${{ inputs.dockerfile_url }}\" -o Dockerfile"
          else
            if [ -f Dockerfile ]; then
              echo "▶ Using existing repo Dockerfile" | tee -a "$LOG_FILE"
            else
              echo "::error::Dockerfile이 없습니다. dockerfile_url을 입력하거나 레포 루트에 Dockerfile을 추가하세요."
              exit 1
            fi
          fi

      - name: "🧰 Install Maven via curl"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/04_maven_install.log"
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          MV="${{ inputs.maven_version }}"
          URL="https://archive.apache.org/dist/maven/maven-3/${MV}/binaries/apache-maven-${MV}-bin.tar.gz"
          echo "▶ Install Maven ${MV}" | tee -a "$LOG_FILE"
          run_cmd "curl -fsSL \"$URL\" -o maven.tgz"
          run_cmd "sudo tar -C /opt -xzf maven.tgz"
          run_cmd "sudo ln -sf \"/opt/apache-maven-${MV}/bin/mvn\" /usr/local/bin/mvn"
          run_cmd "mvn -v"

      - name: "🧱 Maven Build (package)"
        id: mvn
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/05_maven_package.log"
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          echo "▶ Maven package" | tee -a "$LOG_FILE"
          if [[ "${{ inputs.skip_tests }}" == "true" ]]; then
            run_cmd "mvn -B -DskipTests package"
          else
            run_cmd "mvn -B package"
          fi
          JAR_PATH="$(ls -1 target/*.jar | grep -Ev 'sources|javadoc' | head -n1 || true)"
          if [ -z "$JAR_PATH" ]; then echo "::error::target/에 실행가능 JAR이 없습니다."; exit 1; fi
          echo "jar_path=$JAR_PATH" >> "$GITHUB_OUTPUT"
          echo "Built JAR: $JAR_PATH" | tee -a "$LOG_FILE"

      - name: "🐳 Build Docker image"
        id: dimg
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/06_docker_build.log"
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          IMG="${{ inputs.image_name }}"
          TAG="v${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          FULL="${IMG}:${TAG}"
          echo "full_image=$FULL" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "▶ Build image: $FULL" | tee -a "$LOG_FILE"
          run_cmd "docker buildx build --load -t \"$FULL\" ."
          run_cmd "docker image ls \"$FULL\""

      - name: "📦 Export image & generate checksums"
        id: saveimg
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/07_export.log"
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          OUT="dist"
          IMG="${{ steps.dimg.outputs.full_image }}"
          TAR="${OUT}/$(echo "$IMG" | tr '/:' '__').tar"
          TGZ="${TAR}.gz"
          echo "▶ Save image & checksums" | tee -a "$LOG_FILE"
          run_cmd "mkdir -p \"$OUT\""
          run_cmd "docker save \"$IMG\" -o \"$TAR\""
          run_cmd "gzip -9 \"$TAR\""
          run_cmd "(cd \"$OUT\" && sha256sum \"$(basename \"$TGZ\")\" > \"$(basename \"$TGZ\").sha256\")"
          run_cmd "(cd \"$OUT\" && md5sum    \"$(basename \"$TGZ\")\" > \"$(basename \"$TGZ\").md5\")"
          JAR="${{ steps.mvn.outputs.jar_path }}"
          run_cmd "cp \"$JAR\" \"$OUT/\""
          run_cmd "(cd \"$OUT\" && sha256sum \"$(basename \"$JAR\")\" > \"$(basename \"$JAR\").sha256\")"
          run_cmd "(cd \"$OUT\" && md5sum    \"$(basename \"$JAR\")\" > \"$(basename \"$JAR\").md5\")"
          echo "tar_gz=$TGZ" >> "$GITHUB_OUTPUT"
          echo "jar_file=$OUT/$(basename "$JAR")" >> "$GITHUB_OUTPUT"

      - name: "⬆️ Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: springboot-build-and-image
          path: |
            dist/**
            .github/echo_logs/**
          if-no-files-found: error
          retention-days: 14

      - name: "🏷️ Create Release & upload assets"
        if: ${{ inputs.create_release == true }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_id }}-${{ github.run_attempt }}
          name: "Build ${{ github.run_id }}-${{ github.run_attempt }}"
          body: |
            - JDK: ${{ inputs.java_version }}
            - Maven: ${{ inputs.maven_version }}
            - Image: ${{ steps.dimg.outputs.full_image }}
            - Jar: ${{ steps.mvn.outputs.jar_path }}
            - Echo logs included (.github/echo_logs)
          files: |
            dist/*.jar
            dist/*.jar.sha256
            dist/*.jar.md5
            dist/*.tar.gz
            dist/*.tar.gz.sha256
            dist/*.tar.gz.md5

      - name: "📥 Print curl download commands"
        run: |
          set -Eeuo pipefail
          export LOG_FILE="$LOG_DIR/10_curl_examples.log"
          run_cmd(){ local cmd="$*"; printf 'echo %q\n' "$cmd" | tee -a "${LOG_FILE:-/dev/null}"; bash -lc "$cmd" 2>&1 | tee -a "${LOG_FILE:-/dev/null}"; }
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          TAG="v${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          JAR_FILE="$(basename "${{ steps.saveimg.outputs.jar_file }}")"
          IMG_FILE="$(basename "${{ steps.saveimg.outputs.tar_gz }}")"
          echo "▶ CURL commands" | tee -a "$LOG_FILE"
          run_cmd "echo curl -L -o ${JAR_FILE} https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${JAR_FILE}"
          run_cmd "echo curl -L -o ${JAR_FILE}.sha256 https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${JAR_FILE}.sha256"
          run_cmd "echo sha256sum -c ${JAR_FILE}.sha256"
          run_cmd "echo curl -L -o ${IMG_FILE} https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${IMG_FILE}"
          run_cmd "echo curl -L -o ${IMG_FILE}.sha256 https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/${IMG_FILE}.sha256"
          run_cmd "echo sha256sum -c ${IMG_FILE}.sha256"
          run_cmd "echo gunzip -c ${IMG_FILE} \| docker load"
