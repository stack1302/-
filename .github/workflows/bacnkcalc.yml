name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write

env:
  TZ: Asia/Seoul
  MAVEN_OPTS: -Xmx1g

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 0) Echo 샘플 리포트/디렉터리(과거 printf 오류 교정 버전)
      - name: Prepare echo folders & report
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p .github/echo_db/sql .github/echo_db/logs .github/echo_db/backups
          mkdir -p .github/echo_net .github/echo_java .github/echo_reports
          mkdir -p .github/echo_tools .github/echo_artifacts .github/echo_cache .github/echo_tmp
          touch .github/echo_db/sql/.keep .github/echo_db/logs/.keep .github/echo_db/backups/.keep
          touch .github/echo_net/.keep .github/echo_java/.keep .github/echo_reports/.keep
          touch .github/echo_tools/.keep .github/echo_artifacts/.keep .github/echo_cache/.keep .github/echo_tmp/.keep

          # printf 포맷·인자 모두 따옴표로 감싸 오류 방지
          ts="$(date +'%Y-%m-%dT%H:%M:%S%z')"
          printf 'ECHO FILE %03d %s\n' 1 "$ts" > .github/echo_reports/report_1.txt

      # 1) Checkstyle 설정 파일을 리포지토리에 생성(규칙 완화 버전)
      - name: Create Checkstyle config
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p .checkstyle
          cat > .checkstyle/checkstyle.xml <<'XML'
          <?xml version="1.0"?>
          <!DOCTYPE module PUBLIC
            "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
            "https://checkstyle.org/dtds/configuration_1_3.dtd">
          <module name="Checker">
            <property name="charset" value="UTF-8"/>
            <module name="SeverityMatchFilter">
              <property name="severity" value="error"/>
            </module>
            <module name="FileTabCharacter">
              <property name="eachLine" value="true"/>
            </module>
            <module name="LineLength">
              <property name="max" value="140"/>
              <property name="ignorePattern" value="^package|^import|http(s)?://"/>
            </module>
            <module name="TreeWalker">
              <module name="JavadocPackage"><property name="severity" value="ignore"/></module>
              <module name="JavadocMethod"><property name="severity" value="ignore"/></module>
              <module name="JavadocVariable"><property name="severity" value="ignore"/></module>
              <module name="JavadocType"><property name="severity" value="ignore"/></module>
              <module name="NeedBraces"><property name="severity" value="ignore"/></module>
              <module name="MultipleVariableDeclarations"><property name="severity" value="ignore"/></module>
              <module name="InnerAssignment"><property name="severity" value="ignore"/></module>
              <module name="MagicNumber"><property name="severity" value="ignore"/></module>
              <module name="HideUtilityClassConstructor"><property name="severity" value="ignore"/></module>
              <module name="DesignForExtension"><property name="severity" value="ignore"/></module>
              <module name="AvoidStarImport"><property name="severity" value="ignore"/></module>
              <module name="WhitespaceAround"><property name="severity" value="warning"/></module>
              <module name="FinalParameters"><property name="severity" value="ignore"/></module>
            </module>
          </module>
          XML

          cat > .checkstyle/suppressions.xml <<'XML'
          <?xml version="1.0"?>
          <!DOCTYPE suppressions PUBLIC
            "-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN"
            "https://checkstyle.org/dtds/suppressions_1_2.dtd">
          <suppressions>
          </suppressions>
          XML

      # 2) Java & Maven (settings.xml 생성 + 캐시)
      - name: Setup Java 21 (Temurin) + Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Show Java/Maven versions
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -v
          echo "✅ settings.xml present at $HOME/.m2/settings.xml"

      - name: Warm up dependencies (go-offline)
        shell: bash
        run: |
          set -Eeuo pipefail
          mvn -q -e -DskipTests dependency:go-offline

      # 3) 코드 포맷 → 테스트 → 품질체크
      - name: Spotless apply
        shell: bash
        run: |
          set -Eeuo pipefail
          mvn -q -e spotless:apply

      - name: Test (with reports)
        shell: bash
        run: |
          set -Eeuo pipefail
          mvn -q -e -DskipTests=false test

      - name: Lint & Static Analysis (spotless/checkstyle/spotbugs)
        shell: bash
        run: |
          set -Eeuo pipefail
          mvn -q -e spotless:check checkstyle:check spotbugs:spotbugs

      - name: Generate SBOM (CycloneDX)
        shell: bash
        run: |
          set -Eeuo pipefail
          mvn -q -e cyclonedx:makeAggregateBom

      - name: Upload surefire-reports
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: |
            target/surefire-reports/**
            target/checkstyle-result.xml
          if-no-files-found: ignore

      - name: Upload JaCoCo site
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/**
          if-no-files-found: ignore

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            target/bom.json
            target/bom.xml
          if-no-files-found: error

      # 4) Trivy (소스 폴더 스캔, 'path' 입력 사용 금지 → 최신 입력 규약 적용)
      - name: Trivy FS scan (source)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scanners: vuln,secret,config
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: table
          output: trivy-java.txt
          cache: true
      - name: Upload Trivy result
        uses: actions/upload-artifact@v4
        with:
          name: trivy-java
          path: trivy-java.txt
          if-no-files-found: error

      # 5) 패키징 & 실행 산출물 업로드
      - name: Package (skip tests)
        shell: bash
        run: |
          set -Eeuo pipefail
          mvn -q -e -DskipTests package
          ls -al target

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: bankcalc-jar
          path: target/bankcalc.jar
          if-no-files-found: error

      - name: Run app example & export CSV
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p outputs
          java -jar target/bankcalc.jar \
            --start 100000 \
            --script scripts/sample-ops.csv \
            --interest 3.2 \
            --days 30 \
            --export outputs/history.csv
          echo "FINAL_BALANCE=$(tail -n +2 outputs/history.csv | tail -n1 | awk -F, '{print $5}')" >> $GITHUB_OUTPUT
          ls -al outputs

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: bankcalc-outputs
          path: outputs/**
          if-no-files-found: error

      # 6) Docker: 로컬 로드(amd64) → GHCR 멀티 아키텍처 푸시
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build local image (amd64) --load
        shell: bash
        run: |
          set -Eeuo pipefail
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            -t bankcalc:local \
            --load .

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push multi-arch image
        id: pushimg
        shell: bash
        run: |
          set -Eeuo pipefail
          TAG="ghcr.io/${{ github.repository_owner }}/bankcalc:$(date +'%Y%m%d-%H%M')"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            -t "$TAG" \
            --push .

      - name: Print image tag
        run: echo "Pushed image => ${{ steps.pushimg.outputs.TAG }}"
