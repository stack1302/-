name: "🗂️ Mass Dir + 📀 ISO + 📦 Packages + 🚀 Release (all-steps, no-skip)"

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      root_dir:
        description: "생성 기준 경로(리포지토리 루트 기준)"
        required: true
        default: ".github/echo_mass"
      top_count:
        description: "최상위 디렉토리 개수"
        required: true
        default: "600"
      sub_count:
        description: "각 최상위 디렉토리 아래 하위 디렉토리 개수 (0=없음)"
        required: true
        default: "3"
      prefix:
        description: "디렉토리 접두어"
        required: true
        default: "dir-"
      sub_prefix:
        description: "하위 디렉토리 접두어"
        required: true
        default: "sub-"
      iso_source_dir:
        description: "ISO로 묶을 소스 디렉토리"
        required: true
        default: ".github"
      iso_output_name:
        description: "출력 ISO 파일명(확장자 제외)"
        required: true
        default: "github-dir"
      iso_label:
        description: "ISO 볼륨 라벨(최대 32자 권장)"
        required: true
        default: "GITHUB_DIR"
      commit_message:
        description: "자동 커밋 메시지(비워도 자동 생성)"
        required: false
        default: ""

permissions:
  contents: write

concurrency:
  group: mass-dir-iso-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ROOT_DIR: ${{ (github.event_name == 'workflow_dispatch' && inputs.root_dir) || '.github/echo_mass' }}
      TOP: ${{ (github.event_name == 'workflow_dispatch' && inputs.top_count) || '600' }}
      SUB: ${{ (github.event_name == 'workflow_dispatch' && inputs.sub_count) || '3' }}
      PREF: ${{ (github.event_name == 'workflow_dispatch' && inputs.prefix) || 'dir-' }}
      SUBP: ${{ (github.event_name == 'workflow_dispatch' && inputs.sub_prefix) || 'sub-' }}
      SRC_DIR: ${{ (github.event_name == 'workflow_dispatch' && inputs.iso_source_dir) || '.github' }}
      ISO_NAME: ${{ (github.event_name == 'workflow_dispatch' && inputs.iso_output_name) || 'github-dir' }}
      ISO_LABEL: ${{ (github.event_name == 'workflow_dispatch' && inputs.iso_label) || 'GITHUB_DIR' }}
      COMMIT_MSG_IN: ${{ (github.event_name == 'workflow_dispatch' && inputs.commit_message) || '' }}
      ISO_TIMEOUT: "420"
      ZIP_TIMEOUT: "300"
      RSYNC_TIMEOUT: "180"
      HEALTH_TIMEOUT: "30"
      MAX_UPLOAD_MB: "200"
      EXCLUDES: ".git,.github/echo_mass,node_modules,target,build,dist,out,.next,.cache,.gradle,.m2,venv,.venv,coverage,iso_build,packages,.gitignore"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate inputs (no-skip)
        shell: bash
        run: |
          set -Eeuo pipefail
          [[ "${TOP}" =~ ^[0-9]+$ ]] || { echo "top_count는 정수"; exit 1; }
          [[ "${SUB}" =~ ^[0-9]+$ ]] || { echo "sub_count는 정수"; exit 1; }
          (( TOP >= 0 && TOP <= 20000 )) || { echo "top_count 범위 초과(0~20000)"; exit 1; }
          (( SUB >= 0 && SUB <= 200 ))   || { echo "sub_count 범위 초과(0~200)"; exit 1; }
          SAFE_ROOT="${ROOT_DIR#./}"
          [[ -n "${SAFE_ROOT}" ]] || { echo "root_dir 비었음"; exit 1; }
          [[ "${SAFE_ROOT}" != /* ]] || { echo "root_dir는 리포지토리 내부 상대경로여야 함"; exit 1; }
          [[ "${SAFE_ROOT}" != *".."* ]] || { echo "root_dir 상위 참조 불가(..)"; exit 1; }
          if [ ${#ISO_LABEL} -gt 32 ]; then
            echo "ISO_LABEL 32자 초과 → 자동절단"
            echo "ISO_LABEL=${ISO_LABEL:0:32}" >> "$GITHUB_ENV"
          fi

      # ✅ FIX: setup-java 보다 먼저 pom.xml 생성 (cache: maven 에러 방지)
      - name: Ensure minimal pom.xml exists (for Maven cache)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ ! -s "pom.xml" ]; then
            cat > pom.xml <<'POM'
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>bootstrap.sample</groupId>
              <artifactId>bootstrap-sample</artifactId>
              <version>0.0.1</version>
              <properties>
                <maven.compiler.release>21</maven.compiler.release>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              </properties>
            </project>
            POM
            echo "✅ temporary pom.xml created for setup-java cache"
          else
            echo "ℹ️ pom.xml already exists"
          fi

      - name: Set up JDK 21 (Temurin) + Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Bootstrap Maven Wrapper (plugin-first + correct curl fallback)
        shell: bash
        run: |
          set -Eeuo pipefail
          MW_VER="3.3.2"
          MAVEN_VER="3.9.11"
          mvn -N -q -e org.apache.maven.plugins:maven-wrapper-plugin:${MW_VER}:wrapper \
            -DwrapperVersion=${MW_VER} -Dmaven=${MAVEN_VER} || true
          mkdir -p .mvn/wrapper
          if [ ! -s ".mvn/wrapper/maven-wrapper-${MW_VER}.jar" ]; then
            curl -fL --retry 3 \
              "https://repo1.maven.org/maven2/org/apache/maven/wrapper/maven-wrapper/${MW_VER}/maven-wrapper-${MW_VER}.jar" \
              -o ".mvn/wrapper/maven-wrapper-${MW_VER}.jar"
          fi
          cp -f ".mvn/wrapper/maven-wrapper-${MW_VER}.jar" ".mvn/wrapper/maven-wrapper.jar"
          curl -fL --retry 3 "https://raw.githubusercontent.com/apache/maven-wrapper/maven-wrapper/${MW_VER}/mvnw" -o mvnw
          curl -fL --retry 3 "https://raw.githubusercontent.com/apache/maven-wrapper/maven-wrapper/${MW_VER}/mvnw.cmd" -o mvnw.cmd
          chmod +x mvnw
          cat > .mvn/wrapper/maven-wrapper.properties <<EOF
          distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/${MAVEN_VER}/apache-maven-${MAVEN_VER}-bin.zip
          wrapperUrl=https://repo1.maven.org/maven2/org/apache/maven/wrapper/maven-wrapper/${MW_VER}/maven-wrapper-${MW_VER}.jar
          EOF
          ./mvnw -v || true
          echo "✅ Maven Wrapper ready"

      - name: Write settings.xml (HTTPS central + github server)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$HOME/.m2" .github/maven
          cat > .github/maven/settings.xml <<'XML'
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${env.GITHUB_ACTOR}</username>
                <password>${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
            <mirrors>
              <mirror>
                <id>central-https</id>
                <name>Central via HTTPS</name>
                <url>https://repo1.maven.org/maven2/</url>
                <mirrorOf>central</mirrorOf>
              </mirror>
            </mirrors>
            <profiles>
              <profile>
                <id>force-https</id>
                <repositories>
                  <repository>
                    <id>central</id>
                    <url>https://repo1.maven.org/maven2/</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>false</enabled></snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>force-https</activeProfile>
            </activeProfiles>
          </settings>
          XML
          cp -f .github/maven/settings.xml "$HOME/.m2/settings.xml"
          echo "✅ settings.xml written"

      - name: Go offline (warm cache)
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw -q -e -DskipTests dependency:go-offline || true
          ./mvnw -v || true

      # ---------- 시스템 업그레이드 ----------
      - name: System upgrade (timed)
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -Eeuo pipefail
          timeout -k 20 240 sudo apt-get update -y || true
          timeout -k 30 240 sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" upgrade || true
          sudo apt-get -y autoremove --purge || true
          sudo apt-get -y clean || true

      # ---------- 대량 디렉토리 ----------
      - name: Create mass directories (no-skip)
        shell: bash
        run: |
          set -Eeuo pipefail
          ROOT="${ROOT_DIR#./}"
          mkdir -p "${ROOT}"
          pad(){ printf "%0${1}d" "${2}"; }
          wtop=${#TOP}; (( wtop < 3 )) && wtop=3
          wsub=${#SUB}; (( wsub < 2 )) && wsub=2
          end=$(( $(date +%s) + 120 ))
          for i in $(seq 1 "${TOP}"); do
            now=$(date +%s); (( now > end )) && { echo "시간 초과(디렉토리 생성)"; break; }
            i1=$(pad "${wtop}" "${i}")
            D="${ROOT}/${PREF}${i1}"
            mkdir -p "${D}"
            [[ -f "${D}/.keep" ]] || printf "placeholder for %s\n" "${D}" > "${D}/.keep"
            (( SUB > 0 )) || continue
            for j in $(seq 1 "${SUB}"); do
              now=$(date +%s); (( now > end )) && { echo "시간 초과(하위 생성)"; break; }
              j1=$(pad "${wsub}" "${j}")
              SD="${D}/${SUBP}${j1}"
              mkdir -p "${SD}"
              [[ -f "${SD}/.keep" ]] || printf "placeholder for %s\n" "${SD}" > "${SD}/.keep"
            done
          done

      # ---------- 빠른 헬스체크 ----------
      - name: Quick HTTP healthcheck
        shell: bash
        run: |
          set -Eeuo pipefail
          TS=".github/test-server"; mkdir -p "${TS}"
          echo "ok" > "${TS}/healthz.txt"
          nohup python3 -m http.server 8080 --directory "${TS}" > "${TS}/server.log" 2>&1 &
          for i in $(seq 1 10); do
            if timeout ${HEALTH_TIMEOUT} curl -fsS http://127.0.0.1:8080/healthz.txt >/dev/null 2>&1; then echo "health OK"; break; fi
            sleep 1
          done
          pkill -f "python3 -m http.server 8080" 2>/dev/null || true

      # ---------- 커밋/푸시 ----------
      - name: Commit & Push (always) [skip ci]
        shell: bash
        run: |
          set -Eeuo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          [ -d "${ROOT_DIR}" ] && git add "${ROOT_DIR}" || true
          [ -d ".github/test-server" ] && git add ".github/test-server" || true
          [ -f "mvnw" ] && git add mvnw mvnw.cmd .mvn/wrapper || true
          [ -f "pom.xml" ] && git add pom.xml || true
          if git diff --cached --quiet; then
            mkdir -p .github/commit-trace
            date -u +"%Y-%m-%dT%H:%M:%SZ" > .github/commit-trace/last-run.txt
            git add .github/commit-trace/last-run.txt
          fi
          MSG="${COMMIT_MSG_IN}"; [ -z "${MSG}" ] && MSG="chore(auto, no-skip): $(date -u +%Y-%m-%dT%H:%M:%SZ) ${GITHUB_RUN_ID}#${GITHUB_RUN_NUMBER} [skip ci]"
          git commit -m "${MSG}" || { echo "No changes to commit"; exit 0; }
          git push || true

      # ---------- ISO/패키징 준비 ----------
      - name: Prepare staging with rsync (excludes + timeout)
        shell: bash
        run: |
          set -Eeuo pipefail
          SRC="${SRC_DIR#./}"; [ -d "${SRC}" ] || { echo "소스 디렉토리(${SRC_DIR}) 없음"; exit 1; }
          mkdir -p iso_build/staging iso_build/meta packages
          if ! command -v rsync >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y rsync
          fi
          IFS=',' read -ra EXS <<< "${EXCLUDES}"
          RSYNC_EX=""
          for e in "${EXS[@]}"; do RSYNC_EX="${RSYNC_EX} --exclude=${e}"; done
          eval timeout ${RSYNC_TIMEOUT} rsync -a --delete ${RSYNC_EX} "${SRC}/" "iso_build/staging/${SRC}/" || true
          find "iso_build/staging/${SRC}" -mindepth 1 -maxdepth 1 -type d | sort > iso_build/meta/top_dirs.txt || true
          find "iso_build/staging/${SRC}" -type f | sort > iso_build/meta/files.txt || true

      - name: Install ISO tools (xorriso, genisoimage, zip, pigz)
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y xorriso genisoimage zip pigz

      - name: Build ISO (timed)
        shell: bash
        run: |
          set -Eeuo pipefail
          OUT="iso_build/${ISO_NAME}.iso"; LABEL="${ISO_LABEL}"
          timeout -k 20 ${ISO_TIMEOUT} xorriso -as mkisofs -R -J -V "${LABEL}" -input-charset utf-8 -o "${OUT}" iso_build/staging || true
          [ -s "${OUT}" ] || { echo "ISO not created"; exit 0; }
          sha256sum "${OUT}" > "iso_build/${ISO_NAME}.sha256"
          md5sum    "${OUT}" > "iso_build/${ISO_NAME}.md5"
          isoinfo -i "${OUT}" -f > "iso_build/${ISO_NAME}.filelist.txt" || true

      - name: Package (zip/tar) with timeout
        shell: bash
        run: |
          set -Eeuo pipefail
          SRC="${SRC_DIR#./}"
          TS=$(date -u +%Y%m%dT%H%M%SZ)
          mkdir -p packages
          timeout -k 10 ${ZIP_TIMEOUT} bash -lc '(cd iso_build/staging && zip -q -0 -r "../../packages/${SRC}-src-'${TS}'.zip" "${SRC}")' || true
          [ -f "packages/${SRC}-src-${TS}.zip" ] && sha256sum "packages/${SRC}-src-${TS}.zip" > "packages/${SRC}-src-${TS}.zip.sha256" || true
          [ -f "iso_build/${ISO_NAME}.iso" ] && timeout -k 10 ${ZIP_TIMEOUT} zip -q -0 -j "packages/${ISO_NAME}-${TS}.iso.zip" "iso_build/${ISO_NAME}.iso" || true
          [ -f "packages/${ISO_NAME}-${TS}.iso.zip" ] && sha256sum "packages/${ISO_NAME}-${TS}.iso.zip" > "packages/${ISO_NAME}-${TS}.iso.zip.sha256" || true
          if command -v pigz >/dev/null 2>&1; then
            timeout -k 10 ${ZIP_TIMEOUT} bash -lc '(cd iso_build/staging && tar -I pigz -cf "../../packages/'${SRC}'-src-'${TS}'.tar.gz" "${SRC}")' || true
          else
            timeout -k 10 ${ZIP_TIMEOUT} bash -lc '(cd iso_build/staging && tar -czf "../../packages/'${SRC}'-src-'${TS}'.tar.gz" "${SRC}")' || true
          fi
          [ -f "packages/${SRC}-src-${TS}.tar.gz" ] && sha256sum "packages/${SRC}-src-${TS}.tar.gz" > "packages/${SRC}-src-${TS}.tar.gz.sha256" || true

      - name: Size cap check (no errors if none)
        id: cap
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob
          TOTAL=0
          files=( "iso_build/${ISO_NAME}.iso" packages/* )
          for f in "${files[@]}"; do
            [ -f "$f" ] || continue
            SZ=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f")
            TOTAL=$(( TOTAL + SZ ))
          done
          echo "bytes=${TOTAL}" >> "$GITHUB_OUTPUT"
          LIM=$(( MAX_UPLOAD_MB * 1024 * 1024 ))
          if (( TOTAL > LIM )); then
            echo "exceed=true"  >> "$GITHUB_OUTPUT"
          else
            echo "exceed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifacts (full set)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ISO_NAME }}-bundle
          path: |
            iso_build/${{ env.ISO_NAME }}.iso
            iso_build/${{ env.ISO_NAME }}.sha256
            iso_build/${{ env.ISO_NAME }}.md5
            iso_build/${{ env.ISO_NAME }}.filelist.txt
            packages/*
            .github/test-server/server.log
          if-no-files-found: warn
          retention-days: 7

      - name: Compute release metadata (always)
        id: relmeta
        shell: bash
        run: |
          set -Eeuo pipefail
          TAG="v${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}"
          NAME="Auto Release — ${ISO_NAME} @ Run #${GITHUB_RUN_NUMBER}"
          {
            echo "tag=${TAG}"
            echo "name=${NAME}"
          } >> "$GITHUB_OUTPUT"
          FILES=""
          for f in \
            "iso_build/${ISO_NAME}.iso" \
            "iso_build/${ISO_NAME}.sha256" \
            "iso_build/${ISO_NAME}.md5" \
            "iso_build/${ISO_NAME}.filelist.txt" \
            packages/* ; do
            [ -e "$f" ] && FILES="${FILES}${f}\n"
          done
          printf "%b" "$FILES" > files.txt
          FILES_ESCAPED=$(perl -pe 's/%/%25/g; s/\n/%0A/g; s/\r/%0D/g' files.txt)
          echo "files=${FILES_ESCAPED}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release and upload assets (no-skip)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.relmeta.outputs.tag }}
          name: ${{ steps.relmeta.outputs.name }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          make_latest: false
          body: |
            ## Automated Release (no-skip)
            - Source: `${{ env.SRC_DIR }}`
            - ISO Label: `${{ env.ISO_LABEL }}`
            - Run: `${{ github.run_id }} / ${{ github.run_number }}`
            - Time (UTC): ${{ github.run_started_at }}
          files: ${{ steps.relmeta.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
