name: "🗂️ Mass Dir + 📀 ISO Builder (Upgrade+Auto-Commit)"

on:
  workflow_dispatch:
    inputs:
      root_dir:
        description: "생성 기준 경로(리포지토리 루트 기준)"
        required: true
        default: ".github/echo_mass"
      top_count:
        description: "최상위 디렉토리 개수"
        required: true
        default: "1000"
      sub_count:
        description: "각 최상위 디렉토리 아래 하위 디렉토리 개수 (0=없음)"
        required: true
        default: "5"
      prefix:
        description: "디렉토리 접두어"
        required: true
        default: "dir-"
      sub_prefix:
        description: "하위 디렉토리 접두어"
        required: true
        default: "sub-"
      options:
        description: "CSV 플래그: gen,placeholders,rock,joliet"
        required: true
        default: "gen,placeholders,rock,joliet"
      iso_source_dir:
        description: "ISO로 묶을 소스 디렉토리"
        required: true
        default: ".github"
      iso_output_name:
        description: "출력 ISO 파일명(확장자 제외)"
        required: true
        default: "github-dir"
      iso_label:
        description: "ISO 볼륨 라벨(최대 32자 권장)"
        required: true
        default: "GITHUB_DIR"
      commit_message:
        description: "자동 커밋 메시지"
        required: false
        default: "chore(mass-dir): upgrade logs + generated directories"

permissions:
  contents: write

concurrency:
  group: mass-dir-iso-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ROOT_DIR: ${{ inputs.root_dir }}
      TOP: ${{ inputs.top_count }}
      SUB: ${{ inputs.sub_count }}
      PREF: ${{ inputs.prefix }}
      SUBP: ${{ inputs.sub_prefix }}
      OPTIONS: ${{ inputs.options }}
      SRC_DIR: ${{ inputs.iso_source_dir }}
      ISO_NAME: ${{ inputs.iso_output_name }}
      ISO_LABEL: ${{ inputs.iso_label }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse flags
        id: flags
        shell: bash
        run: |
          set -Eeuo pipefail
          has_flag(){ [[ ",${OPTIONS}," == *",$1,"* ]]; }
          echo "gen=$( has_flag gen && echo true || echo false )"         >> "$GITHUB_OUTPUT"
          echo "placeholders=$( has_flag placeholders && echo true || echo false )" >> "$GITHUB_OUTPUT"
          echo "rock=$( has_flag rock && echo true || echo false )"       >> "$GITHUB_OUTPUT"
          echo "joliet=$( has_flag joliet && echo true || echo false )"   >> "$GITHUB_OUTPUT"

      - name: System upgrade & report (mandatory)
        shell: bash
        run: |
          set -Eeuo pipefail
          REPORT_DIR=".github/upgrade-report/$(date -u +%Y%m%dT%H%M%SZ)"
          mkdir -p "${REPORT_DIR}"

          {
            echo "# System Upgrade Report"
            echo "- Time (UTC): $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            echo "- Kernel: $(uname -a)"
            command -v lsb_release >/dev/null 2>&1 && lsb_release -a || true
            echo
            echo "## Upgradable (before)"
          } > "${REPORT_DIR}/UPGRADE.md"

          apt -v   > "${REPORT_DIR}/apt-version.txt" 2>&1 || true
          dpkg -l  > "${REPORT_DIR}/packages.before.txt" 2>&1 || true
          apt list --upgradable 2>/dev/null | sort > "${REPORT_DIR}/upgradable.before.txt" || true

          # 실제 업그레이드
          sudo apt-get update -y
          sudo apt-get -y upgrade

          echo >> "${REPORT_DIR}/UPGRADE.md"
          echo "## Upgradable (after)" >> "${REPORT_DIR}/UPGRADE.md"
          apt list --upgradable 2>/dev/null | sort > "${REPORT_DIR}/upgradable.after.txt" || true
          dpkg -l  > "${REPORT_DIR}/packages.after.txt" 2>&1 || true

          {
            echo
            echo "### Summary"
            echo "- Updated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            echo "- Files:"
            ls -1 "${REPORT_DIR}"
          } >> "${REPORT_DIR}/UPGRADE.md"

      - name: Validate inputs & safety (only when gen)
        if: ${{ steps.flags.outputs.gen == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          [[ "${TOP}" =~ ^[0-9]+$ ]] || { echo "top_count는 정수여야 합니다"; exit 1; }
          [[ "${SUB}" =~ ^[0-9]+$ ]] || { echo "sub_count는 정수여야 합니다"; exit 1; }
          MAX_TOP=20000
          (( TOP <= MAX_TOP )) || { echo "top_count=${TOP} > ${MAX_TOP}"; exit 1; }
          SAFE_ROOT="${ROOT_DIR#./}"
          [[ -n "${SAFE_ROOT}" ]] || { echo "root_dir가 비었습니다."; exit 1; }
          mkdir -p "${SAFE_ROOT}"

      - name: Create mass directories (optional by flag)
        if: ${{ steps.flags.outputs.gen == 'true' }}
        shell: bash
        env:
          ADD_FILES: ${{ steps.flags.outputs.placeholders }}
        run: |
          set -Eeuo pipefail
          ROOT="${ROOT_DIR#./}"

          pad(){ printf "%0${1}d" "${2}"; }
          width_top=${#TOP}; (( width_top < 3 )) && width_top=3
          width_sub=${#SUB}; (( width_sub < 2 )) && width_sub=2

          for i in $(seq 1 "${TOP}"); do
            idx_top=$(pad "${width_top}" "${i}")
            D="${ROOT}/${PREF}${idx_top}"
            mkdir -p "${D}"
            if [[ "${ADD_FILES}" == "true" ]]; then
              [[ -f "${D}/.keep" ]] || printf "placeholder for %s\n" "${D}" > "${D}/.keep"
              [[ -f "${D}/README.md" ]] || printf "# %s\n\nAuto-generated directory.\n" "$(basename "${D}")" > "${D}/README.md"
            fi
            if (( SUB > 0 )); then
              for j in $(seq 1 "${SUB}"); do
                idx_sub=$(pad "${width_sub}" "${j}")
                SD="${D}/${SUBP}${idx_sub}"
                mkdir -p "${SD}"
                if [[ "${ADD_FILES}" == "true" ]]; then
                  [[ -f "${SD}/.keep" ]] || printf "placeholder for %s\n" "${SD}" > "${SD}/.keep"
                fi
              done
            fi
          done

          mkdir -p .github/mass-dir-report
          {
            echo "# Directory Listing"
            echo "- Root: ${ROOT}"
            echo "- Generated at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            echo
            echo '```'
            find "${ROOT}" -type d | sort
            echo '```'
          } > .github/mass-dir-report/DIRECTORY_TREE.md
          find "${ROOT}" -mindepth 1 -maxdepth 1 -type d | sort > .github/mass-dir-report/top_dirs.txt

      - name: Mandatory Commit & Push (always)
        shell: bash
        run: |
          set -Eeuo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 변경 사항 추가 (업그레이드 리포트 + 생성 디렉토리 + 생성 리포트)
          git add ".github/upgrade-report" || true
          if [ -d "${ROOT_DIR}" ]; then
            git add "${ROOT_DIR}" || true
          fi
          if [ -d ".github/mass-dir-report" ]; then
            git add ".github/mass-dir-report" || true
          fi

          # 커밋 & 푸시 (변경이 없으면 dummy 변경 생성 후 커밋 보장)
          if git diff --cached --quiet; then
            echo "No staged changes detected. Creating a dummy trace file to ensure commit."
            mkdir -p .github/commit-trace
            date -u +"%Y-%m-%dT%H:%M:%SZ" > .github/commit-trace/last-run.txt
            git add .github/commit-trace/last-run.txt
          fi

          git commit -m "${{ inputs.commit_message }}"
          git push

      - name: Validate source dir & prepare staging (for ISO)
        shell: bash
        run: |
          set -Eeuo pipefail
          SRC="${SRC_DIR#./}"
          [[ -d "${SRC}" ]] || { echo "소스 디렉토리(${SRC_DIR})가 존재하지 않습니다."; exit 1; }
          mkdir -p iso_build/staging
          rsync -a --delete "${SRC}/" "iso_build/staging/${SRC}/"
          mkdir -p iso_build/meta
          find "iso_build/staging/${SRC}" -mindepth 1 -maxdepth 1 -type d | sort > iso_build/meta/top_dirs.txt || true
          find "iso_build/staging/${SRC}" -type f | sort > iso_build/meta/files.txt || true

      - name: Install ISO tools
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y xorriso genisoimage

      - name: Build ISO
        shell: bash
        env:
          ROCK: ${{ steps.flags.outputs.rock }}
          JOLIET: ${{ steps.flags.outputs.joliet }}
        run: |
          set -Eeuo pipefail
          OUT="iso_build/${ISO_NAME}.iso"
          LABEL="${ISO_LABEL}"
          RR_FLAG=""; J_FLAG=""
          [[ "${ROCK}" == "true"  ]] && RR_FLAG="-R"
          [[ "${JOLIET}" == "true" ]] && J_FLAG="-J"
          xorriso -as mkisofs \
            ${RR_FLAG} ${J_FLAG} \
            -V "${LABEL}" \
            -input-charset utf-8 \
            -o "${OUT}" \
            iso_build/staging
          test -s "${OUT}"
          sha256sum "${OUT}" > "${OUT}.sha256"
          md5sum    "${OUT}" > "${OUT}.md5"
          isoinfo -i "${OUT}" -f > "iso_build/${ISO_NAME}.filelist.txt" || true

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.iso_output_name }}-iso
          path: |
            iso_build/${{ inputs.iso_output_name }}.iso
            iso_build/${{ inputs.iso_output_name }}.sha256
            iso_build/${{ inputs.iso_output_name }}.md5
            iso_build/${{ inputs.iso_output_name }}.filelist.txt
          if-no-files-found: error
