name: "üóÇÔ∏è Mass Dir + üìÄ ISO + üì¶ Packages + üöÄ Release (q10m, safe tag/files)"

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      root_dir:
        description: "ÏÉùÏÑ± Í∏∞Ï§Ä Í≤ΩÎ°ú(Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î£®Ìä∏ Í∏∞Ï§Ä)"
        required: true
        default: ".github/echo_mass"
      top_count:
        description: "ÏµúÏÉÅÏúÑ ÎîîÎ†âÌÜ†Î¶¨ Í∞úÏàò"
        required: true
        default: "1000"
      sub_count:
        description: "Í∞Å ÏµúÏÉÅÏúÑ ÎîîÎ†âÌÜ†Î¶¨ ÏïÑÎûò ÌïòÏúÑ ÎîîÎ†âÌÜ†Î¶¨ Í∞úÏàò (0=ÏóÜÏùå)"
        required: true
        default: "5"
      prefix:
        description: "ÎîîÎ†âÌÜ†Î¶¨ Ï†ëÎëêÏñ¥"
        required: true
        default: "dir-"
      sub_prefix:
        description: "ÌïòÏúÑ ÎîîÎ†âÌÜ†Î¶¨ Ï†ëÎëêÏñ¥"
        required: true
        default: "sub-"
      options:
        description: "CSV ÌîåÎûòÍ∑∏: gen,placeholders,rock,joliet,release,pkgzip,pkgtar"
        required: true
        default: "gen,placeholders,rock,joliet,pkgzip,pkgtar"
      iso_source_dir:
        description: "ISOÎ°ú Î¨∂ÏùÑ ÏÜåÏä§ ÎîîÎ†âÌÜ†Î¶¨"
        required: true
        default: ".github"
      iso_output_name:
        description: "Ï∂úÎ†• ISO ÌååÏùºÎ™Ö(ÌôïÏû•Ïûê Ï†úÏô∏)"
        required: true
        default: "github-dir"
      iso_label:
        description: "ISO Î≥ºÎ•® ÎùºÎ≤®(ÏµúÎåÄ 32Ïûê Í∂åÏû•)"
        required: true
        default: "GITHUB_DIR"
      commit_message:
        description: "ÏûêÎèô Ïª§Î∞ã Î©îÏãúÏßÄ(ÎπÑÏõåÎèÑ ÏûêÎèô ÏÉùÏÑ±)"
        required: false
        default: ""

permissions:
  contents: write

concurrency:
  group: mass-dir-iso-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ROOT_DIR: ${{ (github.event_name == 'workflow_dispatch' && inputs.root_dir) || '.github/echo_mass' }}
      TOP: ${{ (github.event_name == 'workflow_dispatch' && inputs.top_count) || '1000' }}
      SUB: ${{ (github.event_name == 'workflow_dispatch' && inputs.sub_count) || '5' }}
      PREF: ${{ (github.event_name == 'workflow_dispatch' && inputs.prefix) || 'dir-' }}
      SUBP: ${{ (github.event_name == 'workflow_dispatch' && inputs.sub_prefix) || 'sub-' }}
      OPTIONS: ${{ (github.event_name == 'workflow_dispatch' && inputs.options) || 'gen,placeholders,rock,joliet,pkgzip,pkgtar' }}
      SRC_DIR: ${{ (github.event_name == 'workflow_dispatch' && inputs.iso_source_dir) || '.github' }}
      ISO_NAME: ${{ (github.event_name == 'workflow_dispatch' && inputs.iso_output_name) || 'github-dir' }}
      ISO_LABEL: ${{ (github.event_name == 'workflow_dispatch' && inputs.iso_label) || 'GITHUB_DIR' }}
      COMMIT_MSG_IN: ${{ (github.event_name == 'workflow_dispatch' && inputs.commit_message) || '' }}
      KEEP_RUNS: "5" # Ïò§ÎûòÎêú Î¶¨Ìè¨Ìä∏/Ìå®ÌÇ§ÏßÄ Î≥¥Ï°¥ Í∞úÏàò

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse flags
        id: flags
        shell: bash
        run: |
          set -Eeuo pipefail
          has_flag(){ [[ ",${OPTIONS}," == *",$1,"* ]]; }
          {
            echo "gen=$( has_flag gen && echo true || echo false )"
            echo "placeholders=$( has_flag placeholders && echo true || echo false )"
            echo "rock=$( has_flag rock && echo true || echo false )"
            echo "joliet=$( has_flag joliet && echo true || echo false )"
            echo "release=$( has_flag release && echo true || echo false )"
            echo "pkgzip=$( has_flag pkgzip && echo true || echo false )"
            echo "pkgtar=$( has_flag pkgtar && echo true || echo false )"
          } >> "$GITHUB_OUTPUT"

      # --- dpkg Í≤ΩÍ≥† ÏòàÎ∞© ÏÇ¨Ï†Ñ Ï†ïÎ¶¨ ---
      - name: Pre-clean dpkg leftover dirs
        shell: bash
        run: |
          set -Eeuo pipefail
          LOG_DIR=".github/upgrade-report/$(date -u +%Y%m%dT%H%M%SZ)"
          mkdir -p "${LOG_DIR}"
          CLEAN_LOG="${LOG_DIR}/dpkg-preclean.log"; : > "${CLEAN_LOG}"
          clean_dir(){ d="$1"; [ -d "$d" ] || return 0; echo "[preclean] $d" | tee -a "${CLEAN_LOG}"; sudo chmod -R u+rwX "$d" || true; sudo chattr -R -i "$d" 2>/dev/null || true; sudo rm -rf "$d" || true; }
          clean_dir "/etc/firefox"
          clean_dir "/etc/apport/native-origins.d"
          clean_dir "/etc/apport/blacklist.d"
          [ -d /etc/apport ] && sudo find /etc/apport -type d -empty -exec rmdir {} \; 2>/dev/null | tee -a "${CLEAN_LOG}" || true

      # --- ÏãúÏä§ÌÖú ÏóÖÍ∑∏Î†àÏù¥Îìú ---
      - name: System upgrade & report
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -Eeuo pipefail
          REPORT_DIR=".github/upgrade-report/$(date -u +%Y%m%dT%H%M%SZ)"
          mkdir -p "${REPORT_DIR}"
          {
            echo "# System Upgrade Report"
            echo "- Time (UTC): $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            echo "- Kernel: $(uname -a)"
            command -v lsb_release >/dev/null 2>&1 && lsb_release -a || true
            echo; echo "## Upgradable (before)"
          } > "${REPORT_DIR}/UPGRADE.md"
          apt -v   > "${REPORT_DIR}/apt-version.txt" 2>&1 || true
          dpkg -l  > "${REPORT_DIR}/packages.before.txt" 2>&1 || true
          apt list --upgradable 2>/dev/null | sort > "${REPORT_DIR}/upgradable.before.txt" || true
          sudo apt-get update -y
          sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" upgrade | tee "${REPORT_DIR}/upgrade.raw.log"
          sudo apt-get -y autoremove --purge || true
          sudo apt-get -y clean || true
          echo >> "${REPORT_DIR}/UPGRADE.md"
          echo "## Upgradable (after)" >> "${REPORT_DIR}/UPGRADE.md"
          apt list --upgradable 2>/dev/null | sort > "${REPORT_DIR}/upgradable.after.txt" || true
          dpkg -l  > "${REPORT_DIR}/packages.after.txt" 2>&1 || true
          { echo; echo "### Summary"; echo "- Updated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"; echo "- Files:"; ls -1 "${REPORT_DIR}"; } >> "${REPORT_DIR}/UPGRADE.md"
          # ÏöîÏïΩÏùÑ Step SummaryÏóêÎèÑ Ï∂úÎ†•
          {
            echo "### Upgrade Summary"
            echo "- Report: ${REPORT_DIR}"
            echo "- Upgradable(before): $(wc -l < "${REPORT_DIR}/upgradable.before.txt" 2>/dev/null || echo 0)"
            echo "- Upgradable(after):  $(wc -l < "${REPORT_DIR}/upgradable.after.txt" 2>/dev/null || echo 0)"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Post-verify dpkg warnings
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE=".github/upgrade-report"; LAST="$(ls -1 "${BASE}" | sort | tail -n1)"
          LOGF="${BASE}/${LAST}/upgrade.raw.log"; CLEAN="${BASE}/${LAST}/dpkg-postclean.log"; : > "${CLEAN}"
          if grep -Eq "unable to delete old directory '/etc/(firefox|apport/[^']+)'" "${LOGF}" 2>/dev/null; then
            echo "[postclean] re-clean" | tee -a "${CLEAN}"
            sudo rm -rf /etc/firefox /etc/apport/native-origins.d /etc/apport/blacklist.d || true
            [ -d /etc/apport ] && sudo find /etc/apport -type d -empty -exec rmdir {} \; 2>/dev/null || true
            sudo dpkg --configure -a || true
            sudo apt-get -f install -y || true
          else
            echo "[postclean] no dpkg directory warnings" | tee -a "${CLEAN}"
          fi

      # --- (ÏòµÏÖò) ÎåÄÎüâ ÎîîÎ†âÌÜ†Î¶¨ ---
      - name: Validate inputs & safety (only when gen)
        if: ${{ steps.flags.outputs.gen == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          # Ï†ïÏàò/Î≤îÏúÑ
          [[ "${TOP}" =~ ^[0-9]+$ ]] || { echo "top_countÎäî Ï†ïÏàò"; exit 1; }
          [[ "${SUB}" =~ ^[0-9]+$ ]] || { echo "sub_countÎäî Ï†ïÏàò"; exit 1; }
          (( TOP >= 0 && TOP <= 20000 )) || { echo "top_count Î≤îÏúÑ Ï¥àÍ≥º(0~20000)"; exit 1; }
          (( SUB >= 0 && SUB <= 200 )) || { echo "sub_count Î≤îÏúÑ Ï¥àÍ≥º(0~200)"; exit 1; }
          # Í≤ΩÎ°ú ÏïàÏ†ÑÏÑ±
          SAFE_ROOT="${ROOT_DIR#./}"
          [[ -n "${SAFE_ROOT}" ]] || { echo "root_dir ÎπÑÏóàÏùå"; exit 1; }
          [[ "${SAFE_ROOT}" != /* ]] || { echo "root_dirÎäî Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ ÎÇ¥Î∂Ä ÏÉÅÎåÄÍ≤ΩÎ°úÏó¨Ïïº Ìï®"; exit 1; }
          [[ "${SAFE_ROOT}" != *".."* ]] || { echo "root_dir ÏÉÅÏúÑ Ï∞∏Ï°∞ Î∂àÍ∞Ä(..)"; exit 1; }
          # ISO ÎùºÎ≤® ÏµúÎåÄ 32Ïûê
          if [ ${#ISO_LABEL} -gt 32 ]; then
            echo "Í≤ΩÍ≥†: ISO_LABEL 32Ïûê Ï¥àÍ≥º ‚Üí ÏûêÎèôÏ†àÎã®"
            ISO_LABEL="${ISO_LABEL:0:32}"
            echo "ISO_LABEL=${ISO_LABEL}" >> "$GITHUB_ENV"
          fi
          mkdir -p "${SAFE_ROOT}"

      - name: Create mass directories (optional by flag)
        if: ${{ steps.flags.outputs.gen == 'true' }}
        shell: bash
        env:
          ADD_FILES: ${{ steps.flags.outputs.placeholders }}
        run: |
          set -Eeuo pipefail
          ROOT="${ROOT_DIR#./}"
          pad(){ printf "%0${1}d" "${2}"; }
          width_top=${#TOP}; (( width_top < 3 )) && width_top=3
          width_sub=${#SUB}; (( width_sub < 2 )) && width_sub=2
          for i in $(seq 1 "${TOP}"); do
            idx_top=$(pad "${width_top}" "${i}")
            D="${ROOT}/${PREF}${idx_top}"
            # Í≤ΩÎ°ú Í∏∏Ïù¥ Í≥ºÎèÑ Î∞©ÏßÄ
            (( ${#D} < 220 )) || { echo "Í≤ΩÍ≥†: Í≤ΩÎ°ú ÎÑàÎ¨¥ ÍπÄ ‚Üí Ï§ëÎã®"; exit 1; }
            mkdir -p "${D}"
            if [[ "${ADD_FILES}" == "true" ]]; then
              [[ -f "${D}/.keep" ]] || printf "placeholder for %s\n" "${D}" > "${D}/.keep"
              [[ -f "${D}/README.md" ]] || printf "# %s\n\nAuto-generated directory.\n" "$(basename "${D}")" > "${D}/README.md"
            fi
            if (( SUB > 0 )); then
              for j in $(seq 1 "${SUB}"); do
                idx_sub=$(pad "${width_sub}" "${j}")
                SD="${D}/${SUBP}${idx_sub}"
                (( ${#SD} < 240 )) || { echo "Í≤ΩÍ≥†: ÌïòÏúÑ Í≤ΩÎ°ú ÎÑàÎ¨¥ ÍπÄ ‚Üí Ï§ëÎã®"; exit 1; }
                mkdir -p "${SD}"
                if [[ "${ADD_FILES}" == "true" ]]; then
                  [[ -f "${SD}/.keep" ]] || printf "placeholder for %s\n" "${SD}" > "${SD}/.keep"
                fi
              done
            fi
          done
          mkdir -p .github/mass-dir-report
          { echo "# Directory Listing"; echo "- Root: ${ROOT}"; echo "- Generated at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"; echo; echo '```'; find "${ROOT}" -type d | sort; echo '```'; } > .github/mass-dir-report/DIRECTORY_TREE.md
          find "${ROOT}" -mindepth 1 -maxdepth 1 -type d | sort > .github/mass-dir-report/top_dirs.txt

      # --- ÌÖåÏä§Ìä∏ ÏÑúÎ≤Ñ ---
      - name: Prepare test server content
        shell: bash
        run: |
          set -Eeuo pipefail
          TS=".github/test-server"; mkdir -p "${TS}"
          printf '<!doctype html><meta charset="utf-8"><title>Test Server</title><h1>Test Server OK</h1><p>Served by GitHub Actions runner.</p>' > "${TS}/index.html"
          echo "ok" > "${TS}/healthz.txt"

      - name: Start test server (background)
        shell: bash
        run: |
          set -Eeuo pipefail
          TS=".github/test-server"; LOG="${TS}/server.log"; PIDF="${TS}/server.pid"
          nohup python3 -m http.server 8080 --directory "${TS}" > "${LOG}" 2>&1 & echo $! > "${PIDF}"
          sleep 1; ps -p "$(cat "${PIDF}")" -o pid,cmd= || true

      - name: Health check (retry)
        shell: bash
        run: |
          set -Eeuo pipefail
          TS=".github/test-server"; OUT="${TS}/curl-health.log"
          : > "${OUT}"
          for i in $(seq 1 10); do
            if curl -fsS http://127.0.0.1:8080/healthz.txt >> "${OUT}" 2>&1; then echo "healthz OK try ${i}" | tee -a "${OUT}"; break; fi
            echo "retry ${i}..." | tee -a "${OUT}"; sleep 1
          done
          curl -fsS http://127.0.0.1:8080/ >> "${OUT}" 2>&1 || true

      - name: Stop test server
        shell: bash
        run: |
          set -Eeuo pipefail
          TS=".github/test-server"
          [ -f "${TS}/server.pid" ] && kill "$(cat "${TS}/server.pid")" 2>/dev/null || true
          sleep 1; pkill -f "python3 -m http.server 8080" 2>/dev/null || true

      # --- Ïª§Î∞ã/Ìë∏Ïãú(Ìï≠ÏÉÅ) ---
      - name: Mandatory Commit & Push (always, safe message)
        shell: bash
        run: |
          set -Eeuo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïä§ÌÖåÏù¥Ïßï
          git add ".github/upgrade-report" || true
          [ -d "${ROOT_DIR}" ] && git add "${ROOT_DIR}" || true
          [ -d ".github/mass-dir-report" ] && git add ".github/mass-dir-report" || true
          git add ".github/test-server" || true
          # Î≥ÄÍ≤ΩÏù¥ ÏóÜÏúºÎ©¥ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÌååÏùºÎ°ú Í∞ïÏ†ú Ïª§Î∞ã
          if git diff --cached --quiet; then
            mkdir -p .github/commit-trace
            date -u +"%Y-%m-%dT%H:%M:%SZ" > .github/commit-trace/last-run.txt
            git add .github/commit-trace/last-run.txt
          fi
          COMMIT_MSG="${COMMIT_MSG_IN}"
          if [ -z "${COMMIT_MSG}" ]; then
            COMMIT_MSG="chore(auto): $(date -u +%Y-%m-%dT%H:%M:%SZ) run ${GITHUB_RUN_ID}#${GITHUB_RUN_NUMBER} (${GITHUB_EVENT_NAME}) [skip ci]"
          else
            COMMIT_MSG="${COMMIT_MSG} [skip ci]"
          fi
          git commit -m "${COMMIT_MSG}" || { echo "No changes to commit"; exit 0; }
          git push

      # --- ISO/Ìå®ÌÇ§ÏßÄ ÎπåÎìú ---
      - name: Validate source dir & prepare staging (for ISO)
        shell: bash
        run: |
          set -Eeuo pipefail
          SRC="${SRC_DIR#./}"; [ -d "${SRC}" ] || { echo "ÏÜåÏä§ ÎîîÎ†âÌÜ†Î¶¨(${SRC_DIR}) ÏóÜÏùå"; exit 1; }
          mkdir -p iso_build/staging iso_build/meta packages
          # rsync Î≥¥Ïû•ÏùÑ ÏúÑÌï¥ ÏÑ§Ïπò
          if ! command -v rsync >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y rsync
          fi
          rsync -a --delete "${SRC}/" "iso_build/staging/${SRC}/"
          find "iso_build/staging/${SRC}" -mindepth 1 -maxdepth 1 -type d | sort > iso_build/meta/top_dirs.txt || true
          find "iso_build/staging/${SRC}" -type f | sort > iso_build/meta/files.txt || true

      - name: Install ISO tools
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y xorriso genisoimage zip

      - name: Build ISO
        shell: bash
        env:
          ROCK: ${{ steps.flags.outputs.rock }}
          JOLIET: ${{ steps.flags.outputs.joliet }}
        run: |
          set -Eeuo pipefail
          OUT="iso_build/${ISO_NAME}.iso"; LABEL="${ISO_LABEL}"
          RR_FLAG=""; J_FLAG=""
          [[ "${ROCK}" == "true"  ]] && RR_FLAG="-R"
          [[ "${JOLIET}" == "true" ]] && J_FLAG="-J"
          xorriso -as mkisofs ${RR_FLAG} ${J_FLAG} -V "${LABEL}" -input-charset utf-8 -o "${OUT}" iso_build/staging
          test -s "${OUT}"
          sha256sum "${OUT}" > "iso_build/${ISO_NAME}.sha256"
          md5sum    "${OUT}" > "iso_build/${ISO_NAME}.md5"
          isoinfo -i "${OUT}" -f > "iso_build/${ISO_NAME}.filelist.txt" || true

      - name: Package source dir (zip/tar.gz) as requested
        shell: bash
        env:
          PKGZIP: ${{ steps.flags.outputs.pkgzip }}
          PKGTAR: ${{ steps.flags.outputs.pkgtar }}
        run: |
          set -Eeuo pipefail
          SRC="${SRC_DIR#./}"
          TS=$(date -u +%Y%m%dT%H%M%SZ)
          mkdir -p packages
          if [[ "${PKGZIP}" == "true" ]]; then
            (cd iso_build/staging && zip -r "../../packages/${SRC}-src-${TS}.zip" "${SRC}")
            sha256sum "packages/${SRC}-src-${TS}.zip" > "packages/${SRC}-src-${TS}.zip.sha256"
            # ISO zipÎèÑ ÏÉùÏÑ±
            zip -j "packages/${ISO_NAME}-${TS}.iso.zip" "iso_build/${ISO_NAME}.iso"
            sha256sum "packages/${ISO_NAME}-${TS}.iso.zip" > "packages/${ISO_NAME}-${TS}.iso.zip.sha256"
          fi
          if [[ "${PKGTAR}" == "true" ]]; then
            (cd iso_build/staging && tar -czf "../../packages/${SRC}-src-${TS}.tar.gz" "${SRC}")
            sha256sum "packages/${SRC}-src-${TS}.tar.gz" > "packages/${SRC}-src-${TS}.tar.gz.sha256"
          fi

      - name: Upload artifacts (ISO + Packages + Logs)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ISO_NAME }}-iso-packages-and-logs
          path: |
            iso_build/${{ env.ISO_NAME }}.iso
            iso_build/${{ env.ISO_NAME }}.sha256
            iso_build/${{ env.ISO_NAME }}.md5
            iso_build/${{ env.ISO_NAME }}.filelist.txt
            packages/*
            .github/test-server/server.log
            .github/test-server/curl-health.log
          if-no-files-found: warn
          retention-days: 7

      # --- Ïò§ÎûòÎêú Î¶¨Ìè¨Ìä∏/Ìå®ÌÇ§ÏßÄ Ï†ïÎ¶¨(ÏµúÍ∑º KEEP_RUNSÎßå Ïú†ÏßÄ) ---
      - name: Prune old reports/packages (keep last N)
        shell: bash
        run: |
          set -Eeuo pipefail
          prune_dir(){ d="$1"; keep="$2"; [ -d "$d" ] || return 0; ls -1 "$d" | sort | head -n -${keep} | while read -r x; do rm -rf "$d/$x"; done 2>/dev/null || true; }
          prune_dir ".github/upgrade-report" "${KEEP_RUNS}"
          prune_dir ".github/mass-dir-report" "${KEEP_RUNS}"
          # packages/Îäî ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÌååÏùºÎ™Ö Í∏∞Î∞ò Ï†ïÎ¶¨
          if [ -d "packages" ]; then
            ls -1 packages | sort | head -n -200 | while read -r f; do rm -f "packages/$f"; done 2>/dev/null || true
          fi

      # --- Î¶¥Î¶¨Ï¶à ÌÉúÍ∑∏/Ïù¥Î¶Ñ/ÌååÏùº Î™©Î°ù Ï§ÄÎπÑ ---
      - name: Compute release metadata
        id: relmeta
        if: ${{ steps.flags.outputs.release == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          # ÌÉúÍ∑∏Îäî ÏïàÏ†Ñ Î¨∏ÏûêÏó¥Î°ú Ï†úÌïú
          SAFE_RUN="${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}"
          TAG="v${SAFE_RUN}"
          NAME="Auto Release ‚Äî ${ISO_NAME} @ Run #${GITHUB_RUN_NUMBER}"
          echo "tag=${TAG}"   >> "$GITHUB_OUTPUT"
          echo "name=${NAME}" >> "$GITHUB_OUTPUT"
          FILES=""
          for f in \
            "iso_build/${ISO_NAME}.iso" \
            "iso_build/${ISO_NAME}.sha256" \
            "iso_build/${ISO_NAME}.md5" \
            "iso_build/${ISO_NAME}.filelist.txt" \
            packages/* ; do
            [ -e "$f" ] && FILES="${FILES}${f}\n"
          done
          printf "%b" "$FILES" > files.txt
          FILES_ESCAPED=$(perl -pe 's/%/%25/g; s/\n/%0A/g; s/\r/%0D/g' files.txt)
          echo "files=${FILES_ESCAPED}" >> "$GITHUB_OUTPUT"

      # --- Î¶¥Î¶¨Ï¶à ÏÉùÏÑ±/ÏóÖÎ°úÎìú ---
      - name: Create GitHub Release and upload assets
        if: ${{ steps.flags.outputs.release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.relmeta.outputs.tag }}
          name: ${{ steps.relmeta.outputs.name }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          make_latest: true
          body: |
            ## Automated Release
            - Source: `${{ env.SRC_DIR }}`
            - ISO Label: `${{ env.ISO_LABEL }}`
            - Options: `${{ env.OPTIONS }}`
            - Run: `${{ github.run_id }} / ${{ github.run_number }}`
            - Time (UTC): ${{ github.run_started_at }}
          files: ${{ steps.relmeta.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
